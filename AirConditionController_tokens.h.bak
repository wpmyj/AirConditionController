// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash


// Identifier tags for tokens
// Creator for attribute: occupied cooling setpoint, endpoint: 1
#define CREATOR_OCCUPIED_COOLING_SETPOINT_1 0xB000
// Creator for attribute: occupied cooling setpoint, endpoint: 2
#define CREATOR_OCCUPIED_COOLING_SETPOINT_2 0xB001
// Creator for attribute: occupied cooling setpoint, endpoint: 3
#define CREATOR_OCCUPIED_COOLING_SETPOINT_3 0xB002
// Creator for attribute: occupied cooling setpoint, endpoint: 4
#define CREATOR_OCCUPIED_COOLING_SETPOINT_4 0xB003
// Creator for attribute: occupied cooling setpoint, endpoint: 5
#define CREATOR_OCCUPIED_COOLING_SETPOINT_5 0xB004
// Creator for attribute: occupied cooling setpoint, endpoint: 6
#define CREATOR_OCCUPIED_COOLING_SETPOINT_6 0xB005
// Creator for attribute: occupied cooling setpoint, endpoint: 7
#define CREATOR_OCCUPIED_COOLING_SETPOINT_7 0xB006
// Creator for attribute: occupied cooling setpoint, endpoint: 8
#define CREATOR_OCCUPIED_COOLING_SETPOINT_8 0xB007
// Creator for attribute: occupied cooling setpoint, endpoint: 9
#define CREATOR_OCCUPIED_COOLING_SETPOINT_9 0xB008
// Creator for attribute: occupied cooling setpoint, endpoint: 10
#define CREATOR_OCCUPIED_COOLING_SETPOINT_10 0xB009
// Creator for attribute: occupied cooling setpoint, endpoint: 11
#define CREATOR_OCCUPIED_COOLING_SETPOINT_11 0xB00A
// Creator for attribute: occupied cooling setpoint, endpoint: 12
#define CREATOR_OCCUPIED_COOLING_SETPOINT_12 0xB00B
// Creator for attribute: occupied cooling setpoint, endpoint: 13
#define CREATOR_OCCUPIED_COOLING_SETPOINT_13 0xB00C
// Creator for attribute: occupied cooling setpoint, endpoint: 14
#define CREATOR_OCCUPIED_COOLING_SETPOINT_14 0xB00D
// Creator for attribute: occupied cooling setpoint, endpoint: 15
#define CREATOR_OCCUPIED_COOLING_SETPOINT_15 0xB00E
// Creator for attribute: occupied cooling setpoint, endpoint: 16
#define CREATOR_OCCUPIED_COOLING_SETPOINT_16 0xB00F
// Creator for attribute: occupied cooling setpoint, endpoint: 17
#define CREATOR_OCCUPIED_COOLING_SETPOINT_17 0xB010
// Creator for attribute: occupied cooling setpoint, endpoint: 18
#define CREATOR_OCCUPIED_COOLING_SETPOINT_18 0xB011
// Creator for attribute: occupied cooling setpoint, endpoint: 19
#define CREATOR_OCCUPIED_COOLING_SETPOINT_19 0xB012
// Creator for attribute: occupied cooling setpoint, endpoint: 20
#define CREATOR_OCCUPIED_COOLING_SETPOINT_20 0xB013
// Creator for attribute: occupied cooling setpoint, endpoint: 21
#define CREATOR_OCCUPIED_COOLING_SETPOINT_21 0xB014
// Creator for attribute: occupied cooling setpoint, endpoint: 22
#define CREATOR_OCCUPIED_COOLING_SETPOINT_22 0xB015
// Creator for attribute: occupied cooling setpoint, endpoint: 23
#define CREATOR_OCCUPIED_COOLING_SETPOINT_23 0xB016
// Creator for attribute: occupied cooling setpoint, endpoint: 24
#define CREATOR_OCCUPIED_COOLING_SETPOINT_24 0xB017
// Creator for attribute: occupied cooling setpoint, endpoint: 25
#define CREATOR_OCCUPIED_COOLING_SETPOINT_25 0xB018
// Creator for attribute: occupied cooling setpoint, endpoint: 26
#define CREATOR_OCCUPIED_COOLING_SETPOINT_26 0xB019
// Creator for attribute: occupied cooling setpoint, endpoint: 27
#define CREATOR_OCCUPIED_COOLING_SETPOINT_27 0xB01A
// Creator for attribute: occupied cooling setpoint, endpoint: 28
#define CREATOR_OCCUPIED_COOLING_SETPOINT_28 0xB01B
// Creator for attribute: occupied cooling setpoint, endpoint: 29
#define CREATOR_OCCUPIED_COOLING_SETPOINT_29 0xB01C
// Creator for attribute: occupied cooling setpoint, endpoint: 30
#define CREATOR_OCCUPIED_COOLING_SETPOINT_30 0xB01D
// Creator for attribute: occupied cooling setpoint, endpoint: 31
#define CREATOR_OCCUPIED_COOLING_SETPOINT_31 0xB01E
// Creator for attribute: occupied cooling setpoint, endpoint: 32
#define CREATOR_OCCUPIED_COOLING_SETPOINT_32 0xB01F
// Creator for attribute: occupied cooling setpoint, endpoint: 33
#define CREATOR_OCCUPIED_COOLING_SETPOINT_33 0xB020
// Creator for attribute: occupied cooling setpoint, endpoint: 34
#define CREATOR_OCCUPIED_COOLING_SETPOINT_34 0xB021
// Creator for attribute: occupied cooling setpoint, endpoint: 35
#define CREATOR_OCCUPIED_COOLING_SETPOINT_35 0xB022
// Creator for attribute: occupied cooling setpoint, endpoint: 36
#define CREATOR_OCCUPIED_COOLING_SETPOINT_36 0xB023
// Creator for attribute: occupied cooling setpoint, endpoint: 37
#define CREATOR_OCCUPIED_COOLING_SETPOINT_37 0xB024
// Creator for attribute: occupied cooling setpoint, endpoint: 38
#define CREATOR_OCCUPIED_COOLING_SETPOINT_38 0xB025
// Creator for attribute: occupied cooling setpoint, endpoint: 39
#define CREATOR_OCCUPIED_COOLING_SETPOINT_39 0xB026
// Creator for attribute: occupied cooling setpoint, endpoint: 40
#define CREATOR_OCCUPIED_COOLING_SETPOINT_40 0xB027
// Creator for attribute: occupied cooling setpoint, endpoint: 41
#define CREATOR_OCCUPIED_COOLING_SETPOINT_41 0xB028
// Creator for attribute: occupied cooling setpoint, endpoint: 42
#define CREATOR_OCCUPIED_COOLING_SETPOINT_42 0xB029
// Creator for attribute: occupied cooling setpoint, endpoint: 43
#define CREATOR_OCCUPIED_COOLING_SETPOINT_43 0xB02A
// Creator for attribute: occupied cooling setpoint, endpoint: 44
#define CREATOR_OCCUPIED_COOLING_SETPOINT_44 0xB02B
// Creator for attribute: occupied cooling setpoint, endpoint: 45
#define CREATOR_OCCUPIED_COOLING_SETPOINT_45 0xB02C
// Creator for attribute: occupied cooling setpoint, endpoint: 46
#define CREATOR_OCCUPIED_COOLING_SETPOINT_46 0xB02D
// Creator for attribute: occupied cooling setpoint, endpoint: 47
#define CREATOR_OCCUPIED_COOLING_SETPOINT_47 0xB02E
// Creator for attribute: occupied cooling setpoint, endpoint: 48
#define CREATOR_OCCUPIED_COOLING_SETPOINT_48 0xB02F
// Creator for attribute: occupied cooling setpoint, endpoint: 49
#define CREATOR_OCCUPIED_COOLING_SETPOINT_49 0xB030
// Creator for attribute: occupied cooling setpoint, endpoint: 50
#define CREATOR_OCCUPIED_COOLING_SETPOINT_50 0xB031
// Creator for attribute: occupied cooling setpoint, endpoint: 51
#define CREATOR_OCCUPIED_COOLING_SETPOINT_51 0xB032
// Creator for attribute: occupied cooling setpoint, endpoint: 52
#define CREATOR_OCCUPIED_COOLING_SETPOINT_52 0xB033
// Creator for attribute: occupied cooling setpoint, endpoint: 53
#define CREATOR_OCCUPIED_COOLING_SETPOINT_53 0xB034
// Creator for attribute: occupied cooling setpoint, endpoint: 54
#define CREATOR_OCCUPIED_COOLING_SETPOINT_54 0xB035
// Creator for attribute: occupied cooling setpoint, endpoint: 55
#define CREATOR_OCCUPIED_COOLING_SETPOINT_55 0xB036
// Creator for attribute: occupied cooling setpoint, endpoint: 56
#define CREATOR_OCCUPIED_COOLING_SETPOINT_56 0xB037
// Creator for attribute: occupied cooling setpoint, endpoint: 57
#define CREATOR_OCCUPIED_COOLING_SETPOINT_57 0xB038
// Creator for attribute: occupied cooling setpoint, endpoint: 58
#define CREATOR_OCCUPIED_COOLING_SETPOINT_58 0xB039
// Creator for attribute: occupied cooling setpoint, endpoint: 59
#define CREATOR_OCCUPIED_COOLING_SETPOINT_59 0xB03A
// Creator for attribute: occupied cooling setpoint, endpoint: 60
#define CREATOR_OCCUPIED_COOLING_SETPOINT_60 0xB03B
// Creator for attribute: occupied cooling setpoint, endpoint: 61
#define CREATOR_OCCUPIED_COOLING_SETPOINT_61 0xB03C
// Creator for attribute: occupied cooling setpoint, endpoint: 62
#define CREATOR_OCCUPIED_COOLING_SETPOINT_62 0xB03D
// Creator for attribute: occupied cooling setpoint, endpoint: 63
#define CREATOR_OCCUPIED_COOLING_SETPOINT_63 0xB03E
// Creator for attribute: occupied cooling setpoint, endpoint: 64
#define CREATOR_OCCUPIED_COOLING_SETPOINT_64 0xB03F


// Types for the tokens
#ifdef DEFINETYPES
typedef int16_t  tokType_occupied_cooling_setpoint;
#endif // DEFINETYPES


// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_1, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_2, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_3, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_4, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_5, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_6, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_7, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_8, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_9, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_10, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_11, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_12, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_13, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_14, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_15, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_16, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_17, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_18, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_19, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_20, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_21, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_22, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_23, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_24, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_25, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_26, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_27, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_28, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_29, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_30, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_31, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_32, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_33, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_34, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_35, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_36, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_37, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_38, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_39, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_40, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_41, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_42, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_43, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_44, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_45, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_46, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_47, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_48, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_49, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_50, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_51, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_52, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_53, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_54, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_55, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_56, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_57, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_58, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_59, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_60, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_61, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_62, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_63, tokType_occupied_cooling_setpoint, 0x0A28)
DEFINE_BASIC_TOKEN(OCCUPIED_COOLING_SETPOINT_64, tokType_occupied_cooling_setpoint, 0x0A28)
#endif // DEFINETOKENS


// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint) do {\
  uint8_t ptr[2]; \
  uint8_t curNetwork = emberGetCurrentNetwork(); \
  uint8_t epNetwork; \
  epNetwork = emberAfNetworkIndexFromEndpoint(1); \
  if((endpoint) == 1 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_1); \
    emberAfWriteServerAttribute(1, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(2); \
  if((endpoint) == 2 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_2); \
    emberAfWriteServerAttribute(2, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(3); \
  if((endpoint) == 3 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_3); \
    emberAfWriteServerAttribute(3, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(4); \
  if((endpoint) == 4 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_4); \
    emberAfWriteServerAttribute(4, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(5); \
  if((endpoint) == 5 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_5); \
    emberAfWriteServerAttribute(5, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(6); \
  if((endpoint) == 6 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_6); \
    emberAfWriteServerAttribute(6, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(7); \
  if((endpoint) == 7 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_7); \
    emberAfWriteServerAttribute(7, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(8); \
  if((endpoint) == 8 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_8); \
    emberAfWriteServerAttribute(8, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(9); \
  if((endpoint) == 9 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_9); \
    emberAfWriteServerAttribute(9, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(10); \
  if((endpoint) == 10 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_10); \
    emberAfWriteServerAttribute(10, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(11); \
  if((endpoint) == 11 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_11); \
    emberAfWriteServerAttribute(11, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(12); \
  if((endpoint) == 12 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_12); \
    emberAfWriteServerAttribute(12, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(13); \
  if((endpoint) == 13 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_13); \
    emberAfWriteServerAttribute(13, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(14); \
  if((endpoint) == 14 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_14); \
    emberAfWriteServerAttribute(14, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(15); \
  if((endpoint) == 15 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_15); \
    emberAfWriteServerAttribute(15, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(16); \
  if((endpoint) == 16 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_16); \
    emberAfWriteServerAttribute(16, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(17); \
  if((endpoint) == 17 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_17); \
    emberAfWriteServerAttribute(17, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(18); \
  if((endpoint) == 18 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_18); \
    emberAfWriteServerAttribute(18, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(19); \
  if((endpoint) == 19 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_19); \
    emberAfWriteServerAttribute(19, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(20); \
  if((endpoint) == 20 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_20); \
    emberAfWriteServerAttribute(20, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(21); \
  if((endpoint) == 21 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_21); \
    emberAfWriteServerAttribute(21, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(22); \
  if((endpoint) == 22 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_22); \
    emberAfWriteServerAttribute(22, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(23); \
  if((endpoint) == 23 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_23); \
    emberAfWriteServerAttribute(23, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(24); \
  if((endpoint) == 24 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_24); \
    emberAfWriteServerAttribute(24, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(25); \
  if((endpoint) == 25 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_25); \
    emberAfWriteServerAttribute(25, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(26); \
  if((endpoint) == 26 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_26); \
    emberAfWriteServerAttribute(26, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(27); \
  if((endpoint) == 27 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_27); \
    emberAfWriteServerAttribute(27, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(28); \
  if((endpoint) == 28 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_28); \
    emberAfWriteServerAttribute(28, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(29); \
  if((endpoint) == 29 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_29); \
    emberAfWriteServerAttribute(29, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(30); \
  if((endpoint) == 30 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_30); \
    emberAfWriteServerAttribute(30, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(31); \
  if((endpoint) == 31 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_31); \
    emberAfWriteServerAttribute(31, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(32); \
  if((endpoint) == 32 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_32); \
    emberAfWriteServerAttribute(32, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(33); \
  if((endpoint) == 33 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_33); \
    emberAfWriteServerAttribute(33, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(34); \
  if((endpoint) == 34 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_34); \
    emberAfWriteServerAttribute(34, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(35); \
  if((endpoint) == 35 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_35); \
    emberAfWriteServerAttribute(35, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(36); \
  if((endpoint) == 36 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_36); \
    emberAfWriteServerAttribute(36, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(37); \
  if((endpoint) == 37 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_37); \
    emberAfWriteServerAttribute(37, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(38); \
  if((endpoint) == 38 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_38); \
    emberAfWriteServerAttribute(38, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(39); \
  if((endpoint) == 39 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_39); \
    emberAfWriteServerAttribute(39, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(40); \
  if((endpoint) == 40 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_40); \
    emberAfWriteServerAttribute(40, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(41); \
  if((endpoint) == 41 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_41); \
    emberAfWriteServerAttribute(41, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(42); \
  if((endpoint) == 42 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_42); \
    emberAfWriteServerAttribute(42, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(43); \
  if((endpoint) == 43 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_43); \
    emberAfWriteServerAttribute(43, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(44); \
  if((endpoint) == 44 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_44); \
    emberAfWriteServerAttribute(44, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(45); \
  if((endpoint) == 45 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_45); \
    emberAfWriteServerAttribute(45, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(46); \
  if((endpoint) == 46 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_46); \
    emberAfWriteServerAttribute(46, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(47); \
  if((endpoint) == 47 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_47); \
    emberAfWriteServerAttribute(47, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(48); \
  if((endpoint) == 48 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_48); \
    emberAfWriteServerAttribute(48, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(49); \
  if((endpoint) == 49 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_49); \
    emberAfWriteServerAttribute(49, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(50); \
  if((endpoint) == 50 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_50); \
    emberAfWriteServerAttribute(50, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(51); \
  if((endpoint) == 51 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_51); \
    emberAfWriteServerAttribute(51, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(52); \
  if((endpoint) == 52 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_52); \
    emberAfWriteServerAttribute(52, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(53); \
  if((endpoint) == 53 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_53); \
    emberAfWriteServerAttribute(53, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(54); \
  if((endpoint) == 54 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_54); \
    emberAfWriteServerAttribute(54, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(55); \
  if((endpoint) == 55 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_55); \
    emberAfWriteServerAttribute(55, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(56); \
  if((endpoint) == 56 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_56); \
    emberAfWriteServerAttribute(56, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(57); \
  if((endpoint) == 57 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_57); \
    emberAfWriteServerAttribute(57, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(58); \
  if((endpoint) == 58 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_58); \
    emberAfWriteServerAttribute(58, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(59); \
  if((endpoint) == 59 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_59); \
    emberAfWriteServerAttribute(59, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(60); \
  if((endpoint) == 60 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_60); \
    emberAfWriteServerAttribute(60, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(61); \
  if((endpoint) == 61 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_61); \
    emberAfWriteServerAttribute(61, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(62); \
  if((endpoint) == 62 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_62); \
    emberAfWriteServerAttribute(62, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(63); \
  if((endpoint) == 63 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_63); \
    emberAfWriteServerAttribute(63, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(64); \
  if((endpoint) == 64 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_occupied_cooling_setpoint *)ptr, TOKEN_OCCUPIED_COOLING_SETPOINT_64); \
    emberAfWriteServerAttribute(64, ZCL_THERMOSTAT_CLUSTER_ID, ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
  } \
} while(false)


// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER do {\
  uint8_t allZeroData[2]; \
  MEMSET(allZeroData, 0, 2); \
  if ( data == NULL ) data = allZeroData; \
  if ( endpoint == 1 ) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_1, data); \
    } \
  } else if ( endpoint == 2) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_2, data); \
    } \
  } else if ( endpoint == 3) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_3, data); \
    } \
  } else if ( endpoint == 4) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_4, data); \
    } \
  } else if ( endpoint == 5) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_5, data); \
    } \
  } else if ( endpoint == 6) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_6, data); \
    } \
  } else if ( endpoint == 7) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_7, data); \
    } \
  } else if ( endpoint == 8) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_8, data); \
    } \
  } else if ( endpoint == 9) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_9, data); \
    } \
  } else if ( endpoint == 10) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_10, data); \
    } \
  } else if ( endpoint == 11) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_11, data); \
    } \
  } else if ( endpoint == 12) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_12, data); \
    } \
  } else if ( endpoint == 13) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_13, data); \
    } \
  } else if ( endpoint == 14) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_14, data); \
    } \
  } else if ( endpoint == 15) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_15, data); \
    } \
  } else if ( endpoint == 16) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_16, data); \
    } \
  } else if ( endpoint == 17) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_17, data); \
    } \
  } else if ( endpoint == 18) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_18, data); \
    } \
  } else if ( endpoint == 19) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_19, data); \
    } \
  } else if ( endpoint == 20) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_20, data); \
    } \
  } else if ( endpoint == 21) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_21, data); \
    } \
  } else if ( endpoint == 22) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_22, data); \
    } \
  } else if ( endpoint == 23) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_23, data); \
    } \
  } else if ( endpoint == 24) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_24, data); \
    } \
  } else if ( endpoint == 25) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_25, data); \
    } \
  } else if ( endpoint == 26) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_26, data); \
    } \
  } else if ( endpoint == 27) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_27, data); \
    } \
  } else if ( endpoint == 28) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_28, data); \
    } \
  } else if ( endpoint == 29) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_29, data); \
    } \
  } else if ( endpoint == 30) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_30, data); \
    } \
  } else if ( endpoint == 31) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_31, data); \
    } \
  } else if ( endpoint == 32) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_32, data); \
    } \
  } else if ( endpoint == 33) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_33, data); \
    } \
  } else if ( endpoint == 34) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_34, data); \
    } \
  } else if ( endpoint == 35) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_35, data); \
    } \
  } else if ( endpoint == 36) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_36, data); \
    } \
  } else if ( endpoint == 37) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_37, data); \
    } \
  } else if ( endpoint == 38) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_38, data); \
    } \
  } else if ( endpoint == 39) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_39, data); \
    } \
  } else if ( endpoint == 40) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_40, data); \
    } \
  } else if ( endpoint == 41) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_41, data); \
    } \
  } else if ( endpoint == 42) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_42, data); \
    } \
  } else if ( endpoint == 43) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_43, data); \
    } \
  } else if ( endpoint == 44) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_44, data); \
    } \
  } else if ( endpoint == 45) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_45, data); \
    } \
  } else if ( endpoint == 46) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_46, data); \
    } \
  } else if ( endpoint == 47) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_47, data); \
    } \
  } else if ( endpoint == 48) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_48, data); \
    } \
  } else if ( endpoint == 49) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_49, data); \
    } \
  } else if ( endpoint == 50) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_50, data); \
    } \
  } else if ( endpoint == 51) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_51, data); \
    } \
  } else if ( endpoint == 52) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_52, data); \
    } \
  } else if ( endpoint == 53) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_53, data); \
    } \
  } else if ( endpoint == 54) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_54, data); \
    } \
  } else if ( endpoint == 55) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_55, data); \
    } \
  } else if ( endpoint == 56) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_56, data); \
    } \
  } else if ( endpoint == 57) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_57, data); \
    } \
  } else if ( endpoint == 58) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_58, data); \
    } \
  } else if ( endpoint == 59) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_59, data); \
    } \
  } else if ( endpoint == 60) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_60, data); \
    } \
  } else if ( endpoint == 61) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_61, data); \
    } \
  } else if ( endpoint == 62) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_62, data); \
    } \
  } else if ( endpoint == 63) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_63, data); \
    } \
  } else if ( endpoint == 64) { \
    if ( clusterId == 0x0201 ) { \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_OCCUPIED_COOLING_SETPOINT_64, data); \
    } \
  } \
} while(false)


